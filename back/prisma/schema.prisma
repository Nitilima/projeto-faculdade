generator client {
    provider             = "prisma-client-py"
    recursive_type_depth = 5
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id             String   @id @default(cuid())
    email          String   @unique
    name           String
    company        String?
    hashedPassword String   @map("hashed_password")
    isActive       Boolean  @default(true) @map("is_active")
    createdAt      DateTime @default(now()) @map("created_at")
    updatedAt      DateTime @updatedAt @map("updated_at")

    expenses   Expense[]
    categories Category[]
    budgets    Budget[]
    reports    Report[]
    settings   UserSettings?

    @@map("users")
}

model Category {
    id          String   @id @default(cuid())
    name        String
    description String?
    isActive    Boolean  @default(true) @map("is_active")
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")

    userId String @map("user_id")
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    expenses Expense[]
    budgets  Budget[]

    @@unique([userId, name], name: "unique_user_category")
    @@index([userId, name], name: "idx_user_category_name")
    @@map("categories")
}

model Expense {
    id          String   @id @default(cuid())
    amount      Float
    description String?
    date        DateTime
    month       String
    year        Int
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")

    userId     String @map("user_id")
    categoryId String @map("category_id")

    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    category Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)

    @@index([userId, month], name: "idx_user_month")
    @@index([userId, categoryId], name: "idx_expense_user_category")
    @@index([date], name: "idx_expense_date")
    @@index([userId, year, month], name: "idx_user_year_month")
    @@map("expenses")
}

model Budget {
    id         String   @id @default(cuid())
    name       String
    amount     Float
    period     String
    startDate  DateTime @map("start_date")
    endDate    DateTime @map("end_date")
    isActive   Boolean  @default(true) @map("is_active")
    alertLimit Float?   @map("alert_limit")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    userId     String  @map("user_id")
    categoryId String? @map("category_id")

    user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

    @@map("budgets")
}

model Report {
    id          String     @id @default(cuid())
    name        String
    description String?
    reportType  ReportType @map("report_type")
    filters     Json?
    isPublic    Boolean    @default(false) @map("is_public")
    createdAt   DateTime   @default(now()) @map("created_at")
    updatedAt   DateTime   @updatedAt @map("updated_at")

    userId String @map("user_id")
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("reports")
}

enum ReportType {
    MONTHLY_SUMMARY
    CATEGORY_ANALYSIS
    BUDGET_COMPARISON
    TREND_ANALYSIS
    CUSTOM
}

model UserSettings {
    id       String @id @default(cuid())
    currency String @default("BRL")
    locale   String @default("pt-BR")
    timezone String @default("America/Sao_Paulo")

    emailNotifications Boolean @default(true) @map("email_notifications")
    budgetAlerts       Boolean @default(true) @map("budget_alerts")
    weeklyReports      Boolean @default(false) @map("weekly_reports")
    monthlyReports     Boolean @default(true) @map("monthly_reports")

    defaultView String @default("dashboard") @map("default_view")
    chartType   String @default("bar") @map("chart_type")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    userId String @unique @map("user_id")
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("user_settings")
}
